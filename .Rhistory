shareshigh$shareshigh
help(prop.table)
help(table)
## creates a contingency table of shareshigh and whether it is the weekend
table(shareshigh$shareshigh, data_channel_train$Weekend)
## creates a contingency table of shareshigh and whether it is the weekend
prop.table(shareshigh$shareshigh, data_channel_train$Weekend)
names(data_channel_train)
## creates  a contingency table of shareshigh and whether it is the weekend
table(shareshigh$shareshigh, data_channel_train$Mon)
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram()
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(color=Weekend)
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(aes(fill=Weekend)
a <- ggplot(data_channel_train, aes(x=shares))
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(aes(fill=Weekend))
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(color=red)
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(color==red)
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(color= "red")
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(color= "red", fill="blue")
a <- ggplot(data_channel_train, aes(x=shares))
a+geom_histogram(color= "red", fill="blue")+ ggtitle("Shares histogram")
## take the name of the highest correlated variable
highest_cor <-shares_correlations[52]  %>% names()
## creats scatter plot looking at shares vs highest correlated variable
g <-ggplot(data_channel_train,  aes(y=shares, x= data_channel_train[[highest_cor]]))
g+ geom_point(aes(color=as.factor(Weekend))) +geom_smooth(method = lm) + ggtitle(" Highest correlated variable with shares") + labs(x="Highest correlated variable", color="Weekend")
data_channel_train$n.Title
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
b+ geom_col()
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
b+ geom_col(color="red")
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
b+ geom_col(color="blue")
## creates plotting object of shares
a <- ggplot(data_channel_train, aes(x=shares))
## histogram of shares
a+geom_histogram(color= "red", fill="blue")+ ggtitle("Shares histogram")
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
b+ geom_col(color="blue")
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
b+ geom_col(fill="blue")
## creates plotting object with number of words in title and shares
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
## creates a bar chart with number of words in title and shares
b+ geom_col(fill="blue")+ ggtitle("# of words in title vs shares")
## creates plotting object with number of words in title and shares
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
## creates a bar chart with number of words in title and shares
b+ geom_col(fill="blue")+ ggtitle("Number of words in title vs shares") + labs(x="Number of words in title")
library(tidyverse)
library(knitr)
library(GGally)
library(corrplot)
library(qwraps2)
library(vtable)
library(psych)
library(ggplot2)
library(cowplot)
library(caret)
library(gbm)
library(randomForest)
library(tree)
library(class)
library(bst)
library(reshape)
library(reshape2)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(data.table)
library(tidyverse)
library(knitr)
library(GGally)
library(corrplot)
library(qwraps2)
library(vtable)
library(psych)
library(ggplot2)
library(cowplot)
library(caret)
library(gbm)
library(randomForest)
library(tree)
library(class)
library(bst)
library(reshape)
library(reshape2)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(data.table)
online <- read.csv('OnlineNewsPopularity.csv')
colnames(online) <- c('url', 'days', 'n.Title', 'n.Content', 'Rate.Unique',
'Rate.Nonstop', 'Rate.Unique.Nonstop', 'n.Links',
'n.Other', 'n.Images', 'n.Videos',
'Avg.Words', 'n.Key', 'Lifestyle', 'Entertainment',
'Business', 'Social.Media', 'Tech', 'World', 'Min.Worst.Key',
'Max.Worst.Key', 'Avg.Worst.Key', 'Min.Best.Key',
'Max.Best.Key', 'Avg.Best.Key', 'Avg.Min.Key', 'Avg.Max.Key',
'Avg.Avg.Key', 'Min.Ref', 'Max.Ref', 'Avg.Ref', 'Mon',
'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun', 'Weekend',
'LDA_00', 'LDA_01', 'LDA_02', 'LDA_03', 'LDA_04',
'Global.Subj', 'Global.Pol', 'Global.Pos.Rate',
'Global.Neg.Rate', 'Rate.Pos', 'Rate.Neg', 'Avg.Pos.Pol',
'Min.Pos.Pol', 'Max.Pos.Pol', 'Avg.Neg.Pol', 'Min.Neg.Pol',
'Max.Neg.Pol', 'Title.Subj', 'Title.Pol', 'Abs.Subj',
'Abs.Pol', 'shares')
#Dropped url and timedelta because they are non-predictive.
online <- online[ , c(3:61)]
summary_table <- function(data_input) {
min <- min(data_input$shares)
q1 <- quantile(data_input$shares, 0.25)
med <- median(data_input$shares)
q3 <- quantile(data_input$shares, 0.75)
max <- max(data_input$shares)
mean1 <- mean(data_input$shares)
sd1 <- sd(data_input$shares)
Summary <- as.data.frame(cbind(min, q1, med, q3, max,
mean1, sd1))
colnames(Summary) <- c("Minimum", "Q1", "Median", "Q3",
"Maximum", "Mean", "SD")
rownames(Summary) <- c("Shares")
out <- Summary
return(out)
}
#Create correlation table and graph for a training dataset
correlation_table <- function(data_input) {
#drop binary variables
correlations <- cor(subset(data_input, select = c(2:4, 6:24,
33:50)))
kable(correlations, caption = 'Correlations Lifestyle')
}
# Create correlation graph
correlation_graph <- function(data_input,sig=0.5){
corr <- cor(subset(data_input, select = c(2:4, 6:24, 33:50)))
corr[lower.tri(corr, diag = TRUE)] <- NA
corr <- melt(corr, na.rm = TRUE)
corr <- subset(corr, abs(value) > 0.5)
corr[order(-abs(corr$value)),]
print(corr)
mtx_corr <- reshape2::acast(corr, Var1~Var2, value.var="value")
corrplot(mtx_corr, is.corr=FALSE, tl.col="black", na.label=" ")
}
## filters rows based on when parameter is 1
data_channel <-  online %>% filter( !!rlang::sym(params$DataChannel) == 1)
## Drop the data_channel_is columns
data_channel <- data_channel[ , -c(12:17)]
## reorder to put shares first
data_channel <- data_channel[ , c(53, 1:52)]
set.seed(5432)
# Split the data into a training and test set (70/30 split)
# indices
train <- sample(1:nrow(data_channel), size = nrow(data_channel)*.70)
test <- setdiff(1:nrow(data_channel), train)
# training and testing subsets
data_channel_train <- data_channel[train, ]
data_channel_test <- data_channel[test, ]
#Shares table for data_channel_train
summary_table(data_channel_train)
#Correlation table for lifestyle_train
correlation_table(data_channel_train)
#Correlation graph for lifestyle_train
correlation_graph(data_channel_train)
ggplot(shareshigh, aes(x=Rate.Pos, y=Rate.Neg,
color=Days_of_Week)) +
geom_point(size=2)
#Correlation graph for lifestyle_train
correlation_graph(data_channel_train)
## creates a new column that is if shares is higher than average or not
shareshigh <- data_channel_train %>% select(shares) %>% mutate (shareshigh = (shares> mean(shares)))
ggplot(shareshigh, aes(x=Rate.Pos, y=Rate.Neg,
color=Days_of_Week)) +
geom_point(size=2)
names(shareshigh)
shareshigh <- data_channel_train %>% select(shares) %>% mutate (shareshigh = (shares> mean(shares)))
names(shareshigh)
## mean of shares
mean(data_channel_train$shares)
## sd of shares
sd(data_channel_train$shares)
## creates a new column that is if shares is higher than average or not
shareshigh <- data_channel_train %>% select(shares) %>% mutate (shareshigh = (shares> mean(shares)))
## creates a contingency table of shareshigh and whether it is the weekend
table(shareshigh$shareshigh, data_channel_train$Weekend)
## creates  a contingency table of shareshigh and whether it is monday
table(shareshigh$shareshigh, data_channel_train$Mon)
## creates a new column that is if shares is higher than average or not
shareshigh <- data_channel_train %>% mutate (shareshigh = (shares> mean(shares)))
## create a new column that combines Mon-Fri into weekdays
shareshigh <- mutate(shareshigh,
Weekday = ifelse(Mon == 1 |
Tues ==1 |
Wed == 1 |
Thurs == 1 |
Fri == 1,
'Weekday', 'Weekend'))
shareshigh <- mutate(shareshigh,
Days_of_Week = ifelse(Mon == 1 &
Weekday == 'Weekday', 'Mon',
ifelse(Tues == 1  &
Weekday == "Weekday", 'Tues',
ifelse(Wed == 1 &
Weekday == "Weekday", 'Wed',
ifelse(Thurs ==1 &
Weekday == 'Weekday', 'Thurs',
ifelse(Fri == 1 &
Weekday == 'Weekday',
'Fri', 'Weekend'))))))
shareshigh$Days_of_Week <- ordered(shareshigh$Days_of_Week,
levels=c("Mon", "Tues",
"Wed", "Thurs",
"Fri", "Weekend"))
## creates a contingency table of shareshigh and whether it is a weekday
print(prop.table(table(shareshigh$Weekday,
shareshigh$shareshigh)))
## creates  a contingency table of shareshigh and the day of the week
print(prop.table(table(shareshigh$Days_of_Week,
shareshigh$shareshigh)))
ggplot(shareshigh, aes(x = Weekday, fill = shareshigh)) +
geom_bar(aes(y = (after_stat(count))/sum(after_stat(count)))) + xlab('Weekday or Weekend?') +
ylab('Relative Frequency')
ggplot(shareshigh, aes(x = Days_of_Week, fill = shareshigh)) +
geom_bar(aes(y = (after_stat(count))/sum(after_stat(count)))) + xlab('Day of the Week') +
ylab('Relative Frequency')
## creates plotting object of shares
a <- ggplot(data_channel_train, aes(x=shares))
## histogram of shares
a+geom_histogram(color= "red", fill="blue")+ ggtitle("Shares histogram")
## creates plotting object with number of words in title and shares
b<- ggplot(data_channel_train, aes(x=n.Title, y=shares))
## creates a bar chart with number of words in title and shares
b+ geom_col(fill="blue")+ ggtitle("Number of words in title vs shares") + labs(x="Number of words in title")
## makes correlation of every variable with shares
shares_correlations <- cor(data_channel_train)[1,] %>% sort()
shares_correlations
## take the name of the highest correlated variable
highest_cor <-shares_correlations[52]  %>% names()
highest_cor
## creats scatter plot looking at shares vs highest correlated variable
g <-ggplot(data_channel_train,  aes(y=shares, x= data_channel_train[[highest_cor]]))
g+ geom_point(aes(color=as.factor(Weekend))) +geom_smooth(method = lm) + ggtitle(" Highest correlated variable with shares") + labs(x="Highest correlated variable vs shares", color="Weekend")
ggplot(shareshigh, aes(x = Weekday, fill = shareshigh)) +
geom_bar(aes(y = (after_stat(count))/sum(after_stat(count)))) + xlab('Weekday or Weekend?') +
ylab('Relative Frequency')
ggplot(shareshigh, aes(x = Days_of_Week, fill = shareshigh)) +
geom_bar(aes(y = (after_stat(count))/sum(after_stat(count)))) + xlab('Day of the Week') +
ylab('Relative Frequency')
## Delete## should this be data_channel_train not shares high?
ggplot(shareshigh, aes(x=Rate.Pos, y=Rate.Neg,
color=Days_of_Week)) +
geom_point(size=2)
View(data_channel_train)
help(render)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Documents/Github/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = github_document,
output_dir = ".",
output_file = x[[1]],
params = x[[2]]
runtime = "static"
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Documents/Github/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = github_document,
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Documents/Github/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
getwd()
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
getwd()
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
library(tidyverse)
library(knitr)
library(GGally)
library(corrplot)
library(qwraps2)
library(vtable)
library(psych)
library(ggplot2)
library(cowplot)
library(caret)
library(gbm)
library(randomForest)
library(tree)
library(class)
library(bst)
library(reshape)
library(reshape2)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(data.table)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
## creates a list of all 6 desired params from online
data_channel_is <- c("Lifestyle", "Entertainment", "Business", "Social.Media", "Tech", "World")
## creates the output file name
output_file <- paste0(data_channel_is, ".md")
#create a list for each channel with just the channel name parameter
params = lapply(data_channel_is, FUN = function(x){list(DataChannel = x)})
#put into a data frame
reports <- tibble(output_file, params)
## renders with params to all based on rows in reports
apply(reports, MARGIN=1, FUN = function(x){
## change first path to wherever yours is and output_dir to whatever folder you want it to output to
rmarkdown::render("C:/Users/Demetri/Documents/NCSU_masters/ST558/Repos/GitHub/ST_558_Project_2/_Rmd/ST_558_Project_2.Rmd",
output_format = "github_document",
output_dir = ".",
output_file = x[[1]],
params = x[[2]],
runtime = "static"
)
}
)
